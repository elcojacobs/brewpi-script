# first test implementation to interpret raw EEPROM data read from Arduino/Spark

import struct
from StringIO import StringIO

arduinoData = \
["0400000000004300A200DC000A800000FD0001000200FE99009AFF660067FF5802B004010403030404000000140066008000AA6600A60100006F00C800C86600"
,"000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00004300A200DC000A800000FD0001000200"
,"FE99009AFF660067FF5802B00401040303040400000014006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600"
,"000A00006F00C800C86600000A00006F00C800C86600000A00004300A200DC000A800000FD0001000200FE99009AFF660067FF5802B004010403030404000000"
,"14006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600"
,"000A00004300A200DC000A800000FD0001000200FE99009AFF660067FF5802B00401040303040400000014006F00C800C86600000A00006F00C800C86600000A"
,"00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00006F00C800C86600000A00000100050216000028C2FF8103000094000000"
,"00000000000000000000000000000000000001000201050100000000000000000000000001000301060100000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]


sparkData = \
["040000000000430000A200DC000A800000FD0001000200FE99009AFF660067FF5802B0040104030304040000001400006F00008000806600000A00006F0000C8"
,"00C86600000A00006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A0000430000A200DC000A"
,"800000FD0001000200FE99009AFF660067FF5802B0040104030304040000001400006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C8"
,"6600000A00006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A0000430000A200DC000A800000FD0001000200FE99009AFF"
,"660067FF5802B0040104030304040000001400006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600"
,"000A00006F0000C800C86600000A00006F0000C800C86600000A0000430000A200DC000A800000FD0001000200FE99009AFF660067FF5802B004010403030404"
,"0000001400006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A00006F0000C800C86600000A"
,"00006F0000C800C86600000A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]

platform = 'spark'

if platform == 'spark':
    data = sparkData
else:
    data = arduinoData

joined = ""
for block in data:
    joined = joined + block
eepromBytes = joined.decode("hex")

if platform == 'spark':
    tempFormatFmt = 'cx'
    controlConstantsPadding = 'x'
    modeFmt = 'cx'

else:
    tempFormatFmt = 'c'
    controlConstantsPadding = ''
    modeFmt = 'c'

startBlock = [['B', 'version'],
             ['5x', 'reserved']]

controlConstants =[[tempFormatFmt, 'tempFormat'],
                   ['T', 'tempSetMin'],
                   ['T', 'tempSetMax'],
                   ['t', 'Kp'],
                   ['t', 'Ki'],
                   ['t', 'Kd'],
                   ['t', 'iMaxErr'],
                   ['t', 'idleRangeH'],
                   ['t', 'idleRangeL'],
                   ['t', 'heatTargetH'],
                   ['t', 'heatTargetL'],
                   ['t', 'coolTargetH'],
                   ['t', 'coolTargetL'],
                   ['H', 'maxHeatTimeForEst'],
                   ['H', 'maxCoolTimeForEst'],
                   ['B', 'fridgeFastFilt'],
                   ['B', 'fridgeSlowFilt'],
                   ['B', 'fridgeSlopeFilt'],
                   ['B', 'beerFastFilt'],
                   ['B', 'beerSlowFilt'],
                   ['B', 'beerSlopeFilt'],
                   ['?', 'lah'],
                   ['?', 'hs'],
                   ['t', 'pidMax'],
                   [controlConstantsPadding, 'padding']]

controlSettings = [[modeFmt, 'mode'],
                   ['T', 'beerSet'],
                   ['T', 'fridgeSet'],
                   ['t', 'heatEst'],
                   ['t', 'coolEst']]

deviceConfig =    [['B', 'c'], # chamber
                   ['B', 'b'], # beer
                   ['B', 'f'], # function
                   ['B', 'h'], # hardware type
                   ['B', 'p'], # pinNr
                   ['?', 'i'], # invert
                   ['?', 't'], # deactivate
                   ['8B', 'a'], # device address
                   ['B', 'nj'], # pio / calibration
                   ['x', 'reserved'],
                   ['x', 'reserved2']]

maxBeers = 6
maxChambers = 4
maxDevices = 16
chamberSettings = controlConstants + [['x', 'reserved']]

beerBlock = controlSettings + [['2x', 'reserved']]
chamberBlock = chamberSettings + beerBlock * maxBeers



entireEeprom = startBlock + chamberBlock * maxChambers + deviceConfig * maxDevices
print entireEeprom

eepromBytesIO = StringIO(eepromBytes)

for var in entireEeprom:
    fmt = var[0]
    jsonKey = var[1]
    value = None

    if fmt == 'T':
        # absolute temperature
        rawValue = eepromBytesIO.read(2)
        value = float(struct.unpack('h', rawValue)[0]) / 512 + 48
    elif fmt == 't':
        # temperature difference
        rawValue = eepromBytesIO.read(2)
        value = float(struct.unpack('h', rawValue)[0]) / 512
    else:
        # other values that which implemented in struct.unpack
        rawValue = eepromBytesIO.read(struct.calcsize(fmt))
        unpacked = struct.unpack(fmt, rawValue)
        if unpacked:
            value = unpacked[0]
        else:
            continue # for reserved bytes
            
    print "hex: {0:20} \t value: {1:20} \t name: {2:30}".format(rawValue.encode("hex"), str(value), jsonKey)

exit(0)
